// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id
  email             String        @unique
  name              String?
  password          String
  role              String        @default("user")
  dob               DateTime?
  avatar            String?
  bio               String?
  phoneNumber       String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?
  isVerified        Boolean       @default(false)
  accountType       String        @default("local")
  ownCourses        Course[]
  joinCourses       User_Course[]
  invitions         Invitation[]
  isSuspended       Boolean       @default(false)
  isBlocked         Boolean       @default(false)
  studentOfficialId String?

  gradeReviews  GradeReview[]
  comments      GradeReviewComment[]
  notifications Notification[]       @relation("User")
  actions       Notification[]       @relation("Actor")
}

model Course {
  id             String           @id
  name           String
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  inviteCode     String           @unique
  courseOwnerId  String
  members        User_Course[]
  courseOwner    User             @relation(fields: [courseOwnerId], references: [id])
  inviations     Invitation[]
  gradeStructure GradeStructure[]
  gradeReviews   GradeReview[]
  isDeleted      Boolean          @default(false)
}

model Invitation {
  id             String        @id
  inviterId      String
  inviteeEmail   String
  status         String        @default("pending")
  courseId       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  roleInCourse   String
  course         Course        @relation(fields: [courseId], references: [id])
  inCourseMember User_Course[]
  inviter        User          @relation(fields: [inviterId], references: [id])
}

model User_Course {
  userId       String
  courseId     String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  course       Course   @relation(fields: [courseId], references: [id])
  roleInCourse String   @default("student")

  invitationId String?
  invitation   Invitation? @relation(fields: [invitationId], references: [id])

  @@id([userId, courseId])
}

model GradeStructure {
  id        String    @id
  courseId  String    @unique
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  course    Course    @relation(fields: [courseId], references: [id])
}

model Notification {
  id        String    @id
  userId    String
  actorId   String
  title     String
  content   String
  type      String
  targetId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation("User", fields: [userId], references: [id])
  actor     User      @relation("Actor", fields: [actorId], references: [id])
}

model GradeReview {
  id            String               @id
  studentId     String
  courseId      String
  currentGrade  Int
  expectedGrade Int
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  deletedAt     DateTime?
  imgURL        String?
  status        String               @default("pending")
  user          User                 @relation(fields: [studentId], references: [id])
  course        Course               @relation(fields: [courseId], references: [id])
  comments      GradeReviewComment[]
}

model GradeReviewComment {
  id            String @id
  userId        String
  gradeReviewId String
  content       String

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  user        User        @relation(fields: [userId], references: [id])
  gradeReview GradeReview @relation(fields: [gradeReviewId], references: [id])
}
